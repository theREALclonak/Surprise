# This file provides examples of Klipper G-Code macros.  The snippets
# in this file may be copied into the main printer.cfg file and
# customized.

# See docs/Config_Reference.md for a description of parameters.

[gcode_macro START_PRINT]
gcode:
    M117 LETS GO!!!
    #PRINT_PROGRESS
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
    STATUS_HEATING
    NEOPIXEL_DISPLAY LED=my_led TYPE=bed_temp Mode=progress
    # Heat bed for probing
    M190 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Home the printer
    G28

    # If you are using QGL:
    #QUAD_GANTRY_LEVEL
    #G28 Z

    # If you are using Z-Tilt:
    #Z_TILT_ADJUST
    NEOPIXEL_DISPLAY LED=my_led TYPE=extruder_temp Mode=progress
    STATUS_HEATING
    M109 S{EXTRUDER_TEMP}
    STATUS_MESHING
    # If you are generating a new bed mesh:
    BED_MESH_CALIBRATE ADAPTIVE=1
    ## NOTE:    The adaptive meshing feature requires exclude_object     ##
    ##      and may require 'Label Objects' to be enabled in the slicer  ##
    ##           To mesh without it just use BED_MESH_CALIBRATE          ##
    # If you are loading an existing mesh:
    #BED_MESH_PROFILE LOAD=default
    # Move the nozzle near the bed
    G1 Z5 F2000
    STATUS_READY
    # Set and wait for nozzle to reach printing temperature
    M109 S{EXTRUDER_TEMP}
    SET_NOZZLE_LEDS_ON
    NEOPIXEL_DISPLAY LED=my_led TYPE=print_percent Mode=progress
    LINE_PURGE
# ----------------------------------------------------------------------------   
[gcode_macro END_PRINT]
gcode:
    M117 Done printing :)
    # move z up
    G91
    G1 E-3 Z+50 F3000
    # absolute xy 
    G90
    G1 X350 Y350 F2000
    #disable hotend and heated bed
    M104 S0
    M140 S0
    # disable steppers
    M84
    BED_MESH_CLEAR
    SET_LED LED=my_led RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
    SET_NOZZLE_LEDS_OFF
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
 # ----------------------------------------------------------------------------  
#[gcode_macro CANCEL_PRINT]
#description: "Cancel the running print"
#rename_existing: CANCEL_PRINT_BASE
#gcode:
#  TURN_OFF_HEATERS
#  NEOPIXEL_DISPLAY LED=my_led TYPE=clear
##  M220 S100 ;Reset Speed factor override percentage to default (100%)
#  M221 S100 ;Reset Extrude factor override percentage to default (100%)
#  SET_NOZZLE_LEDS_OFF
#  SAFE_RETRACT
#  SAFE_PARK

 # M106 S0 ;disable fan

#  CANCEL_PRINT_BASE
 # ----------------------------------------------------------------------------  
# Filament change
[gcode_macro M0]
gcode:
    PAUSE

[gcode_macro CHANGE_FILAMENT]
description: Change filament
gcode:
    {% set X = params.X|default(20)|float %}
    {% set Y = params.Y|default(10)|float %}
    {% set Z = params.Z|default(5)|float %}
    {% set E = params.E|default(100)|float %}
    SAVE_GCODE_STATE NAME=change_filament_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-{E} F1000
    RESTORE_GCODE_STATE NAME=change_filament_state
 # ----------------------------------------------------------------------------  
[gcode_macro TUNE_PRESSURE_ADV]
description: Tune Pressure Advance
gcode:
  # saved_variables.cfg
  {% set speed = 9000 %}
  {% set nozzle_temp = 220 %}
  {% set bed_temp = 85 %}
  {% set nozzle_diameter = 0.4 %}

  # macro parameters
  {% set BED = params.BED|default(bed_temp)|float %}
  {% set NOZZLE = params.NOZZLE|default(nozzle_temp)|float %}
  {% set PA_START = params.PA_START|default(0.0)|float %}
  {% set PA_STOP = params.PA_STOP|default(0.1)|float %}
  {% set NZL = params.NZL|default(nozzle_diameter)|float %}

  # calculated variables
  {% set PA_STEP = (PA_STOP - PA_START) / 20 |float %}
  {% set E20 = (0.1147475 * NZL) * 20|float %}
  {% set E40 = (0.1147475 * NZL) * 40|float %}
  {% set X_MID = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set Y_MID = printer.toolhead.axis_maximum.y|float / 2.0 %}

  # delta printer so we override center to be (0,0)
  {% set X_MID = 0.0|float %}
  {% set Y_MID = 0.0|float %}

  START_PRINT BED_TEMP={BED} EXTRUDER_TEMP={NOZZLE}

  G21 ; millimeter units
  G90 ; absolute XYZ
  M83 ; relative E
  SET_VELOCITY_LIMIT ACCEL=3000 ACCEL_TO_DECEL=1500
  G92 E0
  M106 S0

  G1 X{(X_MID-40)} Y{(Y_MID-50)} F{speed}        ; move to start position
  G1 Z0.25 F300                                  ; move to layer height
  G1 E0.75 F1800                                 ; un-retract
  G1 X{(X_MID-20)} Y{(Y_MID-50)} E{E20} F300     ; print line part one
  G1 X{(X_MID+20)} Y{(Y_MID-50)} E{E40} F3000    ; print line part two
  G1 X{(X_MID+40)} Y{(Y_MID-50)} E{E20} F300     ; print line part three
  G1 E-0.75 F1800                                ; retract
  G1 Z1 F300                                     ; move above layer height

  {% for i in range(0, 21) %}
      SET_PRESSURE_ADVANCE ADVANCE={PA_START + (i * PA_STEP)} ; set Pressure Advance
      M117 PA={PA_START + (i * PA_STEP)}, STEP={PA_STEP}.
      G1 X{(X_MID-40)} Y{(Y_MID-45)+(5*i)} F30000           ; move to start position
      G1 Z0.25 F300                                         ; move to layer height
      G1 E0.75 F1800                                        ; un-retract
      G1 X{(X_MID-20)} Y{(Y_MID-45)+(5*i)} E{E20} F300      ; print line part one
      G1 X{(X_MID+20)} Y{(Y_MID-45)+(5*i)} E{E40} F3000     ; print line part two
      G1 X{(X_MID+40)} Y{(Y_MID-45)+(5*i)} E{E20} F300      ; print line part three
      G1 E-0.75 F1800                                       ; retract
      G1 Z1 F300                                            ; move above layer height
  {% endfor %}

  END_PRINT

  # these may not work, in which case you will need to count and do the math yourself!
  M117 New PA = ({PA_START} + (bestLine * {PA_STEP}) )
  #{action_respond_info ("Find best line and multiply it by (" + PA_START|string + " + (bestLine * " + PA_STEP|string + ") ) to find your PA setting.")}
 # ----------------------------------------------------------------------------
[gcode_macro SPEED_TEST_MOVES]
gcode:
  {% set offset = 25 %}
  
  {% if params.OFFSET is defined %}
    {% set offset = params.OFFSET|int %}
    {% if offset < 5 %}
       {% set offset = 5 %}
    {% endif %}
  {% endif %}

  {% set speed = 1200 %}
  {% set acc = 500 %}
 
  {% if params.SPEED is defined %}
    {% set speed = params.SPEED|int * 60 %}
  {% endif %}
  
  {% if params.ACC is defined %}
    {% set acc = params.ACC|int %}
  {% endif %}

  {% set iters = 1 %}
  {% if params.MOVES is defined %}
    {% set iters = params.MOVES|int %}
  {% endif %}

  {% set x = 1 %}
  {% if params.X is defined %}
    {% set x = params.X|int %}
    {% if x < 0 %}
       {% set x = 0 %}
    {% endif %}
    {% if x > 1 %}
       {% set x = 1 %}
    {% endif %}
  {% endif %}

  {% set y = 1 %}
  {% if params.Y is defined %}
    {% set y = params.X|int %}
    {% if y < 0 %}
       {% set y = 0 %}
    {% endif %}
    {% if y > 1 %}
       {% set y = 1 %}
    {% endif %}
  {% endif %}

  {% set z = 0 %}
  {% if params.Z is defined %}
    {% set z = params.Z|int %}
    {% if z < 0 %}
       {% set z = 0 %}
    {% endif %}
    {% if z > 1 %}
       {% set z = 1 %}
    {% endif %}
  {% endif %}

  RESPOND PREFIX="info" MSG="Testing {iterS} moves with {speed/60|float} speed and {acc} acceleration on axis x={x} y={y} y={y} with offset {offset}"

  M204 S{acc}
  G0 F{speed} 

  {% set tool = printer.toolhead %}
  {% set axisMax     = {'x':printer.configfile.settings.stepper_x.position_max|int-offset, 'y':printer.configfile.settings.stepper_y.position_max|int-offset, 'z':printer.configfile.settings.stepper_z.position_max|int-offset } %}
  {% set axisMin     = {'x':printer.configfile.settings.stepper_x.position_min|int+offset, 'y':printer.configfile.settings.stepper_y.position_min|int+offset, 'z':printer.configfile.settings.stepper_z.position_min|int+offset } %}
                        
  {% for f in range(0,iters) %}

      {% set moveto = "" %}

      {% if x == 1 %}
        {% set px = range(axisMin.x, axisMax.x)|random %}
        {% set moveto = moveto ~ " X" ~ px %}
      {% endif %}

      {% if y == 1 %}
        {% set py = range(axisMin.y, axisMax.y)|random %}
        {% set moveto = moveto ~ " Y" ~ py %}
      {% endif %}

      {% if z == 1 %}
        {% set pz = range(axisMin.z, axisMax.z)|random %}
        {% set moveto = moveto ~ " Z" ~ pz %}
      {% endif %}

      RESPOND PREFIX="info" MSG="Test: {moveto}"
      G0 {moveto}
  {% endfor %}
 # ----------------------------------------------------------------------------  
[gcode_macro MAINTENANCE]
#
# MAINTENANCE
#
# Move the toolhead to 1/2 max above the bed and the front centre
#
description: move the toolhead to a convenient position for working on it
gcode:
    SET_LED LED=my_led RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    {% set mid_x = max_x / 2.0 %}
    {% set z350 = max_z * 0.5 %}

    STATUS_BUSY
    HOME_IF_NEEDED
    G0 X{mid_x} Y40 Z{z350} F3000
    STATUS_READY
  # ---------------------------------------------------------------------------- 
#####################################
#          PID Tune Macros          #
#       Version 1.0  2023-1-30      #
#####################################

################################
######### PID_EXTRUDER #########
################################
[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  NEOPIXEL_DISPLAY LED=my_led TYPE=extruder_temp Mode=progress
  STATUS_HEATING
  {% set e = printer.toolhead.extruder %}
  {% set T = params.TEMPERATURE|default(210)|float %}
  {% set S = params.FAN_IN_PERCENT|default(0)|float *2.55 %}
  {% set P = printer.configfile.config[e].pid_kp|float %}
  {% set I = printer.configfile.config[e].pid_ki|float %}
  {% set D = printer.configfile.config[e].pid_kd|float %}
  M106 S{S}
  M118 // PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  (old)
  PID_CALIBRATE HEATER={e} TARGET={T}
  TURN_OFF_HEATERS
  SAVE_CONFIG
 
################################
############ PID_BED ###########
################################
[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  STATUS_HEATING
  {% set T = params.TEMPERATURE|default(60)|float %}
  {% set P = printer.configfile.config['heater_bed'].pid_kp|float %}
  {% set I = printer.configfile.config['heater_bed'].pid_ki|float %}
  {% set D = printer.configfile.config['heater_bed'].pid_kd|float %}
  M118 // PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  (old)
  PID_CALIBRATE HEATER=heater_bed TARGET={T}
  TURN_OFF_HEATERS
  SAVE_CONFIG    
  # ---------------------------------------------------------------------------- 
  # ZUP and ZDOWN macros taken from Voron documentation: 
# https://docs.vorondesign.com/build/startup/
[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1

[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1
 # ---------------------------------------------------------------------------- 
[delayed_gcode clear_display]
gcode:
 M117
# ---------------------------------------------------------------------------- 
[gcode_macro SAFE_RETRACT]
description: Retract
gcode:
  SAVE_GCODE_STATE NAME=safe_retract

  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83 ;Relative extrusion
    G91 ;Relative positioning

    G10 ;Retract filament
    G1 Z0.2 F2400 ;Raise Z
    G1 E-2 F300 ;Retract filament 2mm to prevent oozing
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

  RESTORE_GCODE_STATE NAME=safe_retract
# ---------------------------------------------------------------------------- 
[gcode_macro _km_save_state]
description: Tracks gcode state.
variable_state_set: {}
variable_is_ephemeral: 0
gcode:
  {% if params.SAVE|int %}
    {% set dummy = state_set.__setitem__(params.NAME, None) %}
  {% else %}
    {% set dummy = state_set.__delitem__(params.NAME) %}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=_km_save_state VARIABLE=is_ephemeral VALUE="{
    1 if state_set|length > 0 else 0 }"
# ---------------------------------------------------------------------------- 
[gcode_macro save_gcode_state]
description: Wraps SAVE_GCODE_STATE to track persistence state.
  Usage: See Klipper documentation
rename_existing: _KM_SAVE_GCODE_STATE
gcode:
  _KM_SAVE_GCODE_STATE {rawparams}
  {% set NAME = params.NAME|default("default") %}
  _km_save_state NAME={NAME} SAVE=1
# ---------------------------------------------------------------------------- 
[gcode_macro restore_gcode_state]
description: Wraps RESTORE_GCODE_STATE to track persistence state.
  Usage: See Klipper documentation
rename_existing: _KM_RESTORE_GCODE_STATE
gcode:
  _KM_RESTORE_GCODE_STATE {rawparams}
  {% set NAME = params.NAME|default("default") %}
  _km_save_state NAME={NAME} SAVE=0
# ---------------------------------------------------------------------------- 
[gcode_macro _abort_on_gcode_state]
gcode:
  {% set save_state = printer["gcode_macro _km_save_state"] %}
  {% if save_state.is_ephemeral %}
    {action_raise_error("Encountered unexpected save state " +
                          save_state.state_set|list|sort|string)}
  {% endif %}
# ---------------------------------------------------------------------------- 
[gcode_macro _km_print_status]
variable_last_status: 'none'
variable_status_stack: []
variable_command_list: {}
variable_status_list: [
  'ready', # Printer is ready to receive a job
  'filament_load', # Loading filament
  'filament_unload', # Unloading filament
  'bed_heating', # Waiting for the bed to reach target
  'chamber_heating', # Waiting for the chamber to reach target
  'homing', # Homing any axis
  'leveling_gantry', # Performing quad gantry-leveling
  'calibrating_z', # Performing z-tilt adjustment
  'meshing', # Calibrating a bed mesh
  'extruder_heating', # Waiting for the extruder to reach target
  'purging', # Printing purge line
  'printing', # Actively printing
  'pausing', # Print is paused
  'cancelling', # Print is being cancelled
  'completing', # Print completed
  ]
gcode:
  {% set ACTION = params.ACTION|trim|upper %}
  {% set STATUS = params.STATUS|default("")|trim|lower %}

  # Add a status handler.
  {% if ACTION == "ADD_EVENT" %}
    {% set COMMAND = params.COMMAND %}
    {% set ARGS = params.ARGS|default(0)|int != 0 %}
    {% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
    {% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
    {% set FILTER_ENTER =
             (params.FILTER_ENTER|default("")|trim|lower).split(',')|
               select()|unique|list %}
    {% set FILTER_LEAVE =
             (params.FILTER_LEAVE|default("")|trim|lower).split(',')|
               select()|unique|list %}

    {% set STATUSES = STATUS.split(',')|map('trim')|list %}
    {% for s in (STATUSES if STATUSES[0] != 'all' else status_list) %}
      {% if not s in command_list %}
        {% set dummy = command_list.__setitem__(s,[]) %}
      {% endif %}
      {% set dummy = command_list[s].append({'cmd':COMMAND, 'args':ARGS,
                                             'type':TYPE, 'when':WHEN,
                                             'filt_e':FILTER_ENTER,
                                             'filt_l':FILTER_LEAVE}) %}
    {% endfor %}

  # Change the current status.
  {% elif ACTION == "CHANGE" %}
    {% if params.RESET_STACK|default(0)|int %}
      {% for dummy in range(status_stack|length) %}
        {% set dummy = status_stack.pop() %}
      {% endfor %}
      # TODO: Once python 3 is required, switch the for loop above to this:
      #{% set dummy = status_stack.clear() %}
    {% elif STATUS == "pop_status" %}
      {% set STATUS = (status_stack|default(['ready'], True)).pop() %}
    {% endif %}

    {% if STATUS not in status_list %}
      {action_raise_error("Status '%s' not valid."|format(STATUS))}
    {% endif %}

    {% if STATUS != last_status %}
      {% set is_printing =
           printer["gcode_macro print_start_set"].print.PRINT_START_PHASE|
             default("")|length != 0 %}
      {% set print_states = ('ALWAYS', 'PRINTING' if is_printing else 'IDLE') %}
      # Process commands for the state we're leaving first.
      {% for c in command_list[last_status]|default([]) %}
        {% if c.type in ('BOTH','LEAVE') and c.when in print_states and
              (not c.filt_l or STATUS in c.filt_l) %}
          M400
          {c.cmd}{% if c.args %} TYPE=LEAVE WHEN={print_states[1]
            } LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
        {% endif %}
      {% endfor %}
      # Process commands for the state we're entering last.
      {% for c in command_list[STATUS]|default([]) %}
        {% if c.type in ('BOTH','ENTER') and c.when in print_states and
              (not c.filt_e or STATUS in c.filt_e) %}
          M400
          {c.cmd}{% if c.args %} TYPE=ENTER WHEN={print_states[1]
            } LAST_STATUS={last_status} NEXT_STATUS={STATUS}{% endif %}
        {% endif %}
      {% endfor %}
      SET_GCODE_VARIABLE MACRO=_km_print_status VARIABLE=last_status VALUE="'{
        STATUS}'"
    {% endif %}

  # Push the current status onto the stack.
  {% elif ACTION == "PUSH_STATUS" %}
    {% set dummy = status_stack.append(last_status) %}

  # Illegal operation.
  {% else %}
    {action_raise_error("Action '%s' not valid."|format(ACTION))}
  {% endif %}
# ---------------------------------------------------------------------------- 
[gcode_macro gcode_on_print_status]
description: Adds a gcode command for a status event.
  Usage: GCODE_ON_PRINT_STATUS STATUS=<status> COMMAND=<gcode> [ARGS=<1|0>]
                               [WHEN=<PRINTING|IDLE|ALWAYS>]
                               [TYPE=<ENTER|LEAVE|BOTH>]
                               [FILTER_ENTER=<status list>]
                               [FILTER_LEAVE=<status list>]
gcode:
  {% set STATUS = (params.STATUS|lower).split(',')|map('trim')|list %}
  {% set TYPE = params.TYPE|default('ENTER')|trim|upper %}
  {% set WHEN = params.WHEN|default('PRINTING')|trim|upper %}
  {% set FILTER_ENTER =
       (params.FILTER_ENTER|default("")|trim|lower).split(',')|select()|list %}
  {% set FILTER_LEAVE =
       (params.FILTER_LEAVE|default("")|trim|lower).split(',')|select()|list %}

  # Error checking
  {% set status_list = printer["gcode_macro _km_print_status"].status_list %}
  {% for s in STATUS %}
    {% if not (s in status_list or s == 'all' and STATUS|length == 1) %}
      {action_raise_error("STATUS parameter '%s' not valid."|format(s))}
    {% endif %}
  {% endfor %}

  {% if TYPE not in ('ENTER', 'LEAVE', 'BOTH') %}
    {action_raise_error("TYPE paramater '%s' not valid."|format(TYPE))}
  {% elif WHEN not in ('PRINTING', 'IDLE', 'ALWAYS') %}
    {action_raise_error("WHEN parameter '%s' not valid."|format(WHEN))}
  {% elif TYPE == 'ENTER' and FILTER_LEAVE %}
    {action_raise_error("FILTER_LEAVE not valid with TYPE=ENTER.")}
  {% elif TYPE == 'LEAVE' and FILTER_ENTER %}
    {action_raise_error("FILTER_ENTER not valid with TYPE=LEAVE.")}
  {% endif %}
  {% for f in FILTER_ENTER %}
    {% if f not in status_list %}
      {action_raise_error("FILTER_ENTER parameter '%s' not valid."|format(f))}
    {% endif %}
  {% endfor %}
  {% for f in FILTER_LEAVE %}
    {% if f not in status_list %}
      {action_raise_error("FILTER_LEAVE parameter '%s' not valid."|format(f))}
    {% endif %}
  {% endfor %}

  # Run the command.
  _KM_PRINT_STATUS ACTION=ADD_EVENT {rawparams}
  # ---------------------------------------------------------------------------- 
[gcode_macro m201]
description: Sets maximum accelleration.
  Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel: 1.7976931348623157e+308
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% if 'X' in params or 'Y' in params %}
    {% set accel = (params.X|default(params.Y)|float,
                    params.Y|default(params.X)|float)|min %}
    SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}
# ---------------------------------------------------------------------------- 
[gcode_macro m203]
description: Sets maximum velocity.
  Usage: M203 [X<velocity>] [Y<velocity>]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set velocity = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT VELOCITY="{velocity}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}
# ---------------------------------------------------------------------------- 
[gcode_macro m205]
description: Sets square corner velocity.
  Usage: M203 [X<velocity>] [Y<velocity>]
gcode:
  {% if 'X' in params or 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY="{
      (params.X|default(0)|float, params.Y|default(0)|float)|min}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}
# ---------------------------------------------------------------------------- 
[gcode_macro m900]
description: Sets pressure advance.
  Usage: M900 [K<advance>] [T<extruder_index>]
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% if km.pressure_advance_scale > 0.0 %}
    {% set extruder = "extruder" ~ params.T|replace('0', '')
       if "T" in params else printer.toolhead.extruder %}
    {% if 'K' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER="{extruder}" ADVANCE="{
        params.K|float * km.pressure_advance_scale}"
    {% endif %}
  {% endif %}
# ---------------------------------------------------------------------------- 
[gcode_macro _reset_velocity_limits]
description: Sets maximum accelleration.
  Usage: M204 [S<accel>] [P<accel> T<accel>]
gcode:
  SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{1.7976931348623157e+308}"
 # ----------------------------------------------------------------------------  
 ######################################################################
# babystep
######################################################################


#    Macro to Babystep Up 0.01mm
[gcode_macro babystep_up3]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1

#    Macro to Babystep Down 0.01mm
[gcode_macro babystep_down3]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1

#    Macro to Babystep Up 0.02mm
[gcode_macro babystep_up]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.02 MOVE=1

#    Macro to Babystep Down 0.02mm
[gcode_macro babystep_down]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.02 MOVE=1

#    Macro to Babystep Up 0.05mm
[gcode_macro babystep_up2]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.05 MOVE=1

#    Macro to Babystep Down 0.05mm
[gcode_macro babystep_down2]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1
# ----------------------------------------------------------------------------    
[gcode_macro HOME_ANDDROPBED]
gcode:
    SET_LED LED=my_led RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
    STATUS_READY
    M117 Home All
    G28
    M117 Dropping Bed
    G1 Z350 F2400
    M117 Done
    STATUS_CLEANING
# ---------------------------------------------------------------------------- 
[gcode_macro G29]
gcode: 
  G28
  BED_MESH_CALIBRATE
  BED_MESH_PROFILE SAVE=p1
  G1 X0 Y0 Z5 F4000
# ----------------------------------------------------------------------------
[gcode_macro home]
gcode:
     SET_LED LED=my_led RED=0 GREEN=1 BLUE=0 SYNC=0 TRANSMIT=1
     SET_NOZZLE_LEDS_ON
     G28
     SET_NOZZLE_LEDS_OFF
     SET_LED LED=my_led RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
[gcode_macro PRINT_PROGRESS]
gcode:
    {% set progress = printer['gcode_macro'].state().progress %}
    {% if progress < 33 %}
        SET_RED
    {% elif progress < 66 %}
        SET_YELLOW
    {% else %}
        SET_GREEN
    {% endif %}

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    #G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    #G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

######################################################################
# BMP280/BME280/BME680 Environmental Sensor
######################################################################

# The macro below assumes you have a BME280 sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: BME280
#gcode_id: AMB
#
# Note the format of the parameter SENSOR in the macro below.  The BME280
# sensor status can be accessed using the format "bme280 <section_name>".
# The example section above is named "my_sensor", thus the bme280 can be
# queried as follows:
#
# QUERY_BME280 SENSOR='bme280 my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_BME280
# as well.

[gcode_macro QUERY_BME280]
gcode:
    {% set sensor = printer["bme280 my_sensor"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity))}

######################################################################
# HTU21D family Environmental Sensor
######################################################################

# The macro below assumes you have a HTU21D sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: HTU21D
#
# Note the format of the parameter SENSOR in the macro below.  The HTU21D
# sensor status can be accessed using the format "htu21d <section_name>".
# The example section above is named "my_sensor", thus the htu21d can be
# queried as follows:
#
# QUERY_HTU21D SENSOR='htu21d my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_HTU21D
# as well.

[gcode_macro QUERY_HTU21D]
gcode:
    {% set sensor = printer["htu21d my_sensor"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.humidity))}

######################################################################
# Override M117 command with rawparams
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

# SDCard 'looping' (aka Marlin M808 commands) support
#
# Support SDCard looping
[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

######################################################################
# G130: Set digital potentiometer value
######################################################################

# The macro below uses the MCP4018 SET_DIGIPOT command to implement
# a `G130` as used on classic Mightyboard-based printers such as
# The Makerbot Replicator 2/2X.
#
# The `G130` command can be used to lower the stepper current
# during preheating and raise the current again prior to starting
# the print.  This is necessary for printers with smaller power
# supplies that needed all the power to heat the bed.
#
# This macro requires one or more [mcp4018] configuration sections:
# (x_axis_pot, y_axis_pot, z_axis_pot, a_axis_pot, b_axis_pot)
#
# Example: G130 X20 Y20 Z20 A20 B20 ; Lower stepper Vrefs while heating

[gcode_macro G130]
gcode:
  M400
  {% if ('X' in params) and ('mcp4018 x_axis_pot' in printer.configfile.config) %}
    {% set x_value = params['X']|float %}
    {% set x_axis_pot_scale = printer.configfile.config["mcp4018 x_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=x_axis_pot WIPER={ x_axis_pot_scale * (x_value / 127.0)}
  {% endif %}
  {% if ('Y' in params) and ('mcp4018 y_axis_pot' in printer.configfile.config) %}
    {% set y_value = params['Y']|float %}
    {% set y_axis_pot_scale = printer.configfile.config["mcp4018 y_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=y_axis_pot WIPER={ y_axis_pot_scale * (y_value / 127.0)}
  {% endif %}
  {% if ('Z' in params) and ('mcp4018 z_axis_pot' in printer.configfile.config) %}
    {% set z_value = params['Z']|float %}
    {% set z_axis_pot_scale = printer.configfile.config["mcp4018 z_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=z_axis_pot WIPER={ z_axis_pot_scale * (z_value / 127.0)}
  {% endif %}
  {% if ('A' in params) and ('mcp4018 a_axis_pot' in printer.configfile.config) %}
    {% set a_value = params['A']|float %}
    {% set a_axis_pot_scale = printer.configfile.config["mcp4018 a_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=a_axis_pot WIPER={ a_axis_pot_scale * (a_value / 127.0)}
  {% endif %}
  {% if ('B' in params) and ('mcp4018 b_axis_pot' in printer.configfile.config) %}
    {% set b_value = params['B']|float %}
    {% set b_axis_pot_scale = printer.configfile.config["mcp4018 b_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=b_axis_pot WIPER={ b_axis_pot_scale * (b_value / 127.0)}
  {% endif %}

########################################################################################
########################################################################################
[gcode_macro G29]
gcode:
  {% set t = params.T|default(0)|float %}

  {% if printer.idle_timeout.state == "Printing" %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    SAVE_GCODE_STATE NAME=G29_state
    G90
    G1 Z10 F240
    {% if t > 30.0 %}
      M190 S{t}
    {% endif %}
    BED_MESH_CALIBRATE
    {% if 'S' in params %}
      M140 S{params.S}
    {% endif %}
    G90
    G1 Z10 F240
    G1 X150 Y155 F6000
    RESTORE_GCODE_STATE NAME=G29_state MOVE=0
  {% endif %}
#################################################################################################
#################################################################################################
[gcode_macro M600]
gcode:
  {% set default_x = printer.toolhead.axis_minimum.x + 5 %}
  {% set default_y = printer.toolhead.axis_minimum.y + 5 %}
  {% set default_e = 100 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'park_x' in svv %}
      {% set default_x = svv.park_x %}
    {% endif %}
    {% if 'park_y' in svv %}
      {% set default_y = svv.park_y %}
    {% endif %}
    {% if 'bowden_len' in svv %}
      {% set default_e = svv.bowden_len %}
    {% endif %}
  {% endif %}

  {% set x = params.X|default(default_x)|float %}
  {% set y = params.Y|default(default_y)|float %}
  {% set z = params.Z|default(20)|float %}
  {% set e = params.E|default(default_e)|float %}

  {% if printer.pause_resume.is_paused %}
    {action_respond_info("Already paused")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    PAUSE X={x} Y={y} Z={z}
    M702 U{e}
  {% endif %}

#######################################################################################################
#######################################################################################################
[gcode_macro M702]
gcode:
  {% set default_u = 100 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'bowden_len' in svv %}
      {% set default_u = svv.bowden_len %}
    {% endif %}
  {% endif %}

  {% set p = params.P|default(8)|float %}
  {% set p_f = params.PF|default(180)|float %}
  {% set i = params.I|default(30)|float %}
  {% set i_f = params.IF|default(180)|float %}
  {% set u = params.U|default(default_u)|float %}
  {% set u_f = params.UF|default(360)|float %}

  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.extruder.temperature < 170 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=M702_state
    M83
    {% if p > 0.0 %}
      G1 E{p} F{p_f}
    {% endif %}
    {% if i > 0.0 %}
      G1 E-{i} F{i_f}
    {% endif %}
    {% if u > 0.0 %}
      G1 E-{u} F{u_f}
    {% endif %}
    RESTORE_GCODE_STATE NAME=M702_state MOVE=0
  {% endif %}

#######################################################################################################
#######################################################################################################

#[gcode_macro M205]
#gcode:
#  {% if 'X' in params %}
#    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
#  {% elif 'Y' in params %}
#    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
#  {% endif %}


[gcode_macro ABS_Preheat]
gcode:
     G28
     G90
     G1 Z150 F1500
     SET_HEATER_TEMPERATURE HEATER=extruder TARGET=40
     SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=130
